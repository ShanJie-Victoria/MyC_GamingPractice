#include<iostream>
#include <Windows.h>
#include <vector>
using namespace std;

wstring tetromino[7];
const int nFieldWidth = 12;
const int nFieldHeight = 13;
unsigned char* pField = nullptr;

const int nScreenWidth = 80; //X
const int nScreenHeight = 30;//Y

int Rotate(int px, int py, int r);
bool DoesPieceFit(int nTetromino, int nRotation, int nPosX, int nPosY);

int main(void)
{
	//create shapes
	tetromino[0].append(L"..X.");
	tetromino[0].append(L"..X.");
	tetromino[0].append(L"..X.");
	tetromino[0].append(L"..X.");
	
	tetromino[1].append(L"..X.");
	tetromino[1].append(L".XX.");
	tetromino[1].append(L".X..");
	tetromino[1].append(L"....");

	tetromino[2].append(L".X..");
	tetromino[2].append(L".XX.");
	tetromino[2].append(L"..X.");
	tetromino[2].append(L"....");

	tetromino[3].append(L"....");
	tetromino[3].append(L".XX.");
	tetromino[3].append(L".XX.");
	tetromino[3].append(L"....");

	tetromino[4].append(L"..X.");
	tetromino[4].append(L".XX.");
	tetromino[4].append(L"..X.");
	tetromino[4].append(L"....");

	tetromino[5].append(L"....");
	tetromino[5].append(L".XX.");
	tetromino[5].append(L"..X.");
	tetromino[5].append(L"..X.");

	tetromino[6].append(L"....");
	tetromino[6].append(L".XX.");
	tetromino[6].append(L".X..");
	tetromino[6].append(L".X..");

	pField = new unsigned char[nFieldWidth * nFieldHeight];
	for (int x = 0; x < nFieldWidth; x++)
	{
		for (int y = 0; y < nFieldHeight; y++)
		{
			pField[y * nFieldWidth + x] = (x == 0 || x == nFieldWidth - 1 || y == nFieldHeight - 1) ? 9 : 0;
			//9-> border,0-> empty
		}
	}

	//使用"Windows.h"在控制台输出
	wchar_t* screen = new wchar_t[nScreenWidth * nScreenHeight];
	for (int i = 0; i < nScreenWidth * nScreenHeight; i++) screen[i] = L' ';
	HANDLE hConsole = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	SetConsoleActiveScreenBuffer(hConsole);
	DWORD dwBytesWritten = 0;

	//Game Logic Stuff
	bool bGameOver = false;

	int nCurrentPiece = 0;
	int nCurrentRotation = 0;
	int nCurrentX = nFieldWidth / 2;
	int nCurrentY = 0;

	bool bKey[4];//上下左右旋转（z）
	bool bRotateHold = false;

	int nSpeed = 20;
	int nSpeedCounter = 0;
	bool bForceDown = false;
	int nPieceCount = 0;
	int nScore = 0;

	vector<int> vLines;//不定长数组 

	while (!bGameOver)
	{
		// timing----------------------添加游戏计时
		Sleep(50);
		nSpeedCounter++;
		bForceDown = (nSpeedCounter == nSpeed);

		// input-----------------------
		for (int k = 0; k < 4; k++)
		{
			//\x27:R --- \x25:L ---- \x28:D---- Z
			bKey[k] = (0x8000 & GetAsyncKeyState((unsigned char)("\x27\x25\x28Z"[k]))) != 0;
		}
		// logic-----------------------
		if (bKey[1])//左
		{
			if(DoesPieceFit(nCurrentPiece,nCurrentRotation,nCurrentX-1,nCurrentY))
			{
				nCurrentX = nCurrentX - 1;
			}
		}
		if (bKey[0])//右
		{
			if (DoesPieceFit(nCurrentPiece, nCurrentRotation, nCurrentX + 1, nCurrentY))
			{
				nCurrentX = nCurrentX + 1;
			}
		}
		if (bKey[2])//下
		{
			if (DoesPieceFit(nCurrentPiece, nCurrentRotation, nCurrentX + 1, nCurrentY))
			{
				nCurrentY = nCurrentY + 1;
			}
		}
		if (bKey[3])//转
		{
			if (DoesPieceFit(nCurrentPiece, nCurrentRotation, nCurrentX + 1, nCurrentY))
			{
				nCurrentRotation = nCurrentRotation + 1;
				//俄罗斯方块大风车
				bRotateHold = true;
			}
		}
		else bRotateHold = false;

		if (bForceDown)
		{
			if (DoesPieceFit(nCurrentPiece, nCurrentRotation, nCurrentX, nCurrentY + 1))
				nCurrentY++;
			else
			{
				//lock current piece ------------
				for (int px = 0; px < 4; px++)
					for (int py = 0; py < 4; py++)
						if (tetromino[nCurrentPiece][Rotate(px, py, nCurrentRotation)] == L'X')
							pField[(nCurrentY + py) * nFieldWidth + (nCurrentX + px)] = nCurrentPiece + 1;
				//如果为方块，则为场地字符串数组赋值为 nCurrentPiece + 1
				
				nPieceCount++;
				if (nPieceCount % 10 == 0)
					if (nSpeed >= 10) nSpeed--;

				//check have we got any lines---------只检测我们方块的四行位置
				for (int py = 0; py < 4; py++)
				{
					if (nCurrentY + py < nFieldHeight - 1)
					{
						//如果这行中的任意位置为空（为0）则说明不可以消除
						bool bLine = true;
						for (int px = 1; px < nFieldWidth; px++)
						{
							bLine &= (pField[(nCurrentY + py) * nFieldWidth + px]) != 0;
						}
						if (bLine) {
							for (int px = 1; px < nFieldWidth - 1; px++)
								pField[(nCurrentY + py) * nFieldWidth + px] = 8;
							//如果都不为空则把这一行全都设置为 8 代表的符号 =

							vLines.push_back(nCurrentY + py);
							//如果出现一行都不为空，就把这一行推入 vLines中
						}
					}
				}
				nScore += 25;
				if (!vLines.empty()) nScore += (1 << vLines.size()) * 100;
				
				//choose the next piece---------
				nCurrentX = nFieldWidth / 2;
				nCurrentY = 0;
				nCurrentRotation = 0;
				nCurrentPiece = rand() % 7;
				
				//if doesn't fit, game over--------
				bGameOver = !DoesPieceFit(nCurrentPiece, nCurrentRotation, nCurrentX, nCurrentY);
			}
			nSpeedCounter = 0;
		}
		// output----------------------
		

		//draw field
		for (int x = 0; x < nFieldWidth; x++) {
			for (int y = 0; y < nFieldHeight; y++) {
				screen[(y + 2) * nScreenWidth + (x + 2)] = L" ABCDEFG=#"[pField[y * nFieldWidth + x]];
			}
		}
		//draw current piece
		for (int px = 0; px < 4; px++)
		{
			for (int py = 0; py < 4; py++)
			{
				if (tetromino[nCurrentPiece][Rotate(px, py, nCurrentRotation)] == L'X')
					screen[(nCurrentY + py + 2) * nScreenWidth + (nCurrentX + px + 2)] = nCurrentPiece + 65;
				// 65? 0+65 =  ASCII 码 'A'
			}
		}
		// draw score
		//swprintf(&screen[2 * nScreenWidth + nFieldWidth + 6], 16, L"SCORE: %d", nScore);
		swprintf(&screen[nScreenWidth + nFieldWidth + 6], 16, L"SCORE: %d", nScore);

		if (!vLines.empty())
		{
			WriteConsoleOutputCharacter(hConsole, LPTSTR(screen), nScreenWidth * nScreenHeight, { 0,0 }, &dwBytesWritten);
			Sleep(400);
			for (auto& v : vLines)
				for (int px = 1; px < nFieldWidth - 1; px++) {
					for (int py = v; py > 0; py--)
						pField[py * nFieldWidth + px] = pField[(py - 1) * nFieldWidth + px];
					pField[px] = 0;
				}
			vLines.clear();
		}
		//display frame 
		WriteConsoleOutputCharacter(hConsole, LPTSTR(screen), nScreenWidth * nScreenHeight, { 0,0 }, &dwBytesWritten);
	}
	//AHO game over
	CloseHandle(hConsole);
	cout << "Game Over ! Score: " << nScore << endl;
	system("pause");

	return 0;
}
int Rotate(int px, int py, int r)
{
	/*将二维问题转为一维问题
	假设4 * 4方格每个格子Assign一个数字0~15
	格子的编号与横纵坐标有函数关系如下：
	*/
	switch (r % 4)
	{
	case 0: return py * 4 + px;			//旋转0次
	case 1: return 12 + py - (px * 4);  //旋转一次，90度
	case 2: return 15 - (py * 4) - px;  //旋转两次，180度
	case 3: return 3 - py + (py * 4);   //旋转三次，270度
	}
	return 0;
}
bool DoesPieceFit(int nTetromino,int nRotation, int nPosX, int nPosY)
{
	for (int px = 0; px < 4; px++)
	{
		for (int py = 0; py < 4; py++)
		{
			//get index into piece
			int pi = Rotate(px, py, nRotation);
			//get index into field
			int fi = (nPosY + py) * nFieldWidth + (nPosX + px);
			//override prevention
			//双层 if 检测目标索引是否出界，出界的就跳过，没出界的继续进行检测
			if (nPosX + px >= 0 && nPosX + px < nFieldWidth)
			{
				if (nPosY + py >= 0 && nPosY + py < nFieldHeight)
				{
					//检测是否与已有方块发生碰撞
					if (tetromino[nTetromino][pi] == L'X' && pField[fi] != 0)
						return false;
					//目标索引是否为方块，场地索引是否不为空白
					//如果两个都为 true，则说明目标索引方块碰到了场地上的方块
				}
			}
		}
	}
	return true;
}
